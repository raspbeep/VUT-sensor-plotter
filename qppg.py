import statistics as stat
from copy import deepcopy
import matplotlib.pyplot as plt

import numpy as np


def data_mean(data_array):
    total = 0
    for i in data_array:
        total += i
    return total / len(data_array)


def rounding(f):
    if f - int(f) < 0.5:
        return int(f)
    return int(f) + 1


def data_min(data_array):
    minimum = -1
    for i in data_array:
        if i < minimum or minimum == -1:
            minimum = i
    return minimum


def data_max(data_array):
    maximum = -1
    for i in data_array:
        if i > maximum or maximum == -1:
            maximum = i
    return maximum


tt_2 = 0
buffer_length = 2048
e_buffer = [0] * buffer_length
l_buffer = [0] * buffer_length
aet = 0

fs = 90

# Slope width (170ms) for PPG
slope_width = 2.0
slope_window = rounding(slope_width * fs)

invalid_data = -32768
# learning period is the first learning_period samples
learning_period = 0
# eye-closing period is set to 0.34 sec (340 ms) for PPG
eye_closing_period = 0.5
# adjust threshold if no pulse found in NDP seconds
no_detection_period = 2.5
# minimum threshold value (default)
threshold_min_default = 9   


def slp_samp(t, data_array):
    global tt_2, buffer_length, e_buffer, l_buffer, aet, slope_window
    while t > tt_2:

        if tt_2 > 0 and tt_2 - 1 > 0 and tt_2 < len(data_array) and tt_2 - 1 < len(data_array):
            val_2 = data_array[tt_2 - 2]
            val_1 = data_array[tt_2 - 1]
        else:
            val_2 = 0
            val_1 = 0

        dy = val_1 - val_2
        if dy < 0:
            dy = 0
        tt_2 += 1
        M = (tt_2 % (buffer_length - 1)) + 1

        e_buffer[M - 1] = dy

        aet = 0
        for i in range(0, slope_window):
            p = M - i
            if p <= 0:
                p += buffer_length
            aet += e_buffer[p - 1]
        l_buffer[M - 1] = aet

    modul = (t % (buffer_length - 1))
    M3 = rounding(modul + 1)
    return l_buffer[M3 - 1]


def q_ppg(data):
    global tt_2, buffer_length, e_buffer, l_buffer, aet, slope_window
    data = deepcopy(data)
    idx_peaks = []
    beat_n = 1

    if data[0] <= invalid_data + 10:
        data[0] = data_mean(data)

    for i in range(len(data)):
        if data[i] <= invalid_data + 10:
            data[i] = data[i - 1]

    # rescale data to Â±2000
    if len(data) < 5 * 60 * fs:
        minimum = data_min(data)
        maximum = data_max(data)
        for i in range(len(data)):
            data[i] = (data[i] - minimum) / (maximum - minimum) * 4000 - 2000
    else:
        step_size = 5 * 60 * fs

        min_data = []
        max_data = []

        for i in range(0, len(data), step_size):
            something = data[i: min(i + 5 * 60 * fs, len(data))]
            max_data.append(max(something))
            min_data.append(min(something))
        med_min = stat.median(min_data)
        med_max = stat.median(max_data)

        for i in range(len(data)):
            data[i] = ((data[i] - med_min) / (med_max - med_min) * 4000) - 2000

    eye_closing = rounding(eye_closing_period * fs)
    expected_period = rounding(no_detection_period * fs)
    timer = 0

    t1 = 8 * fs
    t0 = 0
    n = 0
    for t in range(1, t1 + 2):
        temp = slp_samp(t, data)
        if temp > invalid_data + 10:
            t0 = t0 + temp
            n += 1

    t0 = t0 / n
    ta = 3 * t0

    learning = 1
    t = 0

    while t <= len(data):
        if learning:
            if t > 0 + learning_period:
                learning = 0
                t1 = t0
                t = 0
            else:
                t1 = 2 * t0

        temp = slp_samp(t, data)

        if temp > t1:
            timer = 0
            max_d = temp
            min_d = temp
            t_max = 0
            for tt in range(t + 1, t + eye_closing - 1):
                temp2 = slp_samp(tt, data)
                if temp2 > max_d:
                    max_d = temp2
                    t_max = tt

            if max_d == temp:
                t += 1
                continue
            for tt in range(t_max, (t - (eye_closing // 2) + 1), -1):
                temp2 = slp_samp(tt, data)
                if temp2 < min_d:
                    min_d = temp2

            if max_d > min_d + 10:
                onset = ((max_d - min_d) / 100) + 2
                tpq = t - rounding(0.04 * fs)
                max_min_2_3_threshhold = (max_d - min_d) * (2.0 / 3)

                stop = -1

                for tt in range(t_max, (t - eye_closing // 2) + 1, -1):
                    temp2 = slp_samp(tt, data)
                    if temp2 < max_min_2_3_threshhold:
                        stop = tt
                        break

                if stop == -1:
                    stop = (t - eye_closing // 2)

                for tt in range(stop, t - eye_closing // 2 + rounding(0.024 * fs), -1):
                    temp2 = slp_samp(tt, data)
                    temp3 = slp_samp(tt - rounding(0.024 * fs), data)
                    if temp2 - temp3 < onset:
                        tpq = tt - rounding(0.016 * fs)
                        break

                valley_v = rounding(tpq)
                f = rounding(max(2, tpq - rounding(0.20 * fs)))
                to = rounding(min(tpq + rounding(0.05 * fs), len(data) - 1))
                for valley_i in range(f, to):
                    if valley_v <= 0:
                        t += 1
                        continue
                    if data[valley_v] > data[valley_i] and \
                            data[valley_i] <= data[valley_i - 1] and \
                            data[valley_i] <= data[valley_i + 1]:
                        valley_v = valley_i

                if not learning:
                    if beat_n == 1:
                        if rounding(valley_v) > 0:
                            idx_peaks.append(rounding(valley_v))
                            beat_n += 1
                    else:
                        if rounding(valley_v) > idx_peaks[beat_n - 1 - 1]:
                            idx_peaks.append(rounding(valley_v))
                            beat_n += 1

                ta += (max_d - ta) / 10
                t1 = ta / 3

                t = tpq + eye_closing
        else:
            if not learning:
                timer += 1
                if timer > expected_period and ta > threshold_min_default:
                    ta -= 1
                    t1 = ta / 3

        t += 1

    return idx_peaks


# 1.35
def bruteforce_qppg():
    global slope_width, eye_closing_period, no_detection_period, threshold_min_default, fs
    for slope_width_p in np.arange(1, 5, 0.1):
        for eye_closing_period_p in np.arange(0.05, 1, 0.05):
            for no_detection_period_p in np.arange(1, 2, 0.5):
                for threshold_min_default_p in np.arange(5, 6, 1):
                    for fs_p in np.arange(90, 120, 10):

                        slope_width = slope_width_p
                        eye_closing_period = eye_closing_period_p
                        no_detection_period = no_detection_period_p
                        threshold_min_default = threshold_min_default_p
                        fs = fs_p
                        original = [0.000000, 6.000000, 78.000000, -29.000000, 72.000000, 46.000000, 27.000000,
                                    9.000000, -100.000000, -222.000000, -322.000000, -300.000000, -251.000000,
                                    -96.000000, -26.000000, 35.000000, 84.000000, 50.000000, 67.000000, 42.000000,
                                    30.000000, 93.000000, 65.000000, 22.000000, 40.000000, -31.000000, -24.000000,
                                    39.000000, -16.000000, -14.000000, 42.000000, 61.000000, 26.000000, 112.000000,
                                    17.000000, 60.000000, 53.000000, 36.000000, 29.000000, 19.000000, 16.000000,
                                    29.000000, 2.000000, 44.000000, 51.000000, -29.000000, 30.000000, 58.000000,
                                    14.000000, 62.000000, 21.000000, 2.000000, -27.000000, -333.000000, -273.000000,
                                    -267.000000, -272.000000, -38.000000, -29.000000, 47.000000, 108.000000, 66.000000,
                                    40.000000, 74.000000, 42.000000, 103.000000, -3.000000, 47.000000, 47.000000,
                                    14.000000, -44.000000, 14.000000, -42.000000, 49.000000, 13.000000, 52.000000,
                                    81.000000, 34.000000, 78.000000, 36.000000, 23.000000, 51.000000, 32.000000,
                                    61.000000, 9.000000, 16.000000, 29.000000, 33.000000, -27.000000, 17.000000,
                                    70.000000, 20.000000, 29.000000, -1.000000, 31.000000, -44.000000, -136.000000,
                                    -264.000000, -307.000000, -247.000000, -128.000000, -37.000000, 39.000000,
                                    61.000000, 102.000000, 60.000000, 79.000000, 72.000000, 87.000000, 61.000000,
                                    26.000000, -46.000000, -38.000000, -21.000000, -52.000000, 30.000000, 7.000000,
                                    39.000000, 34.000000, 83.000000, 28.000000, 56.000000, 60.000000, 31.000000,
                                    8.000000, 49.000000, 45.000000, 11.000000, 36.000000, 22.000000, -14.000000,
                                    54.000000, -18.000000, 72.000000, -8.000000, 54.000000, 28.000000, -37.000000,
                                    -162.000000, -286.000000, -306.000000, -284.000000, -142.000000, -28.000000,
                                    25.000000, 42.000000, 98.000000, 91.000000, 18.000000, 70.000000, 54.000000,
                                    84.000000, -6.000000, 14.000000, -10.000000, -2.000000, 9.000000, -7.000000,
                                    4.000000, 30.000000, 25.000000, 76.000000, 76.000000, 39.000000, 38.000000,
                                    72.000000, 32.000000, 44.000000, 31.000000, 6.000000, -5.000000, 36.000000,
                                    -29.000000, 21.000000, -2.000000, 15.000000, 39.000000, 1.000000, 18.000000,
                                    62.000000, -835.000000, 889.000000, -21.000000, -129.000000, -259.000000,
                                    -334.000000, -293.000000, -173.000000, -74.000000, 3.000000, 75.000000, 78.000000,
                                    86.000000, 61.000000, 52.000000, 68.000000, 69.000000, 53.000000, 56.000000,
                                    1.000000, -2.000000, -7.000000, -58.000000, 36.000000, 38.000000, 28.000000,
                                    69.000000, 59.000000, 40.000000, 26.000000, 45.000000, 54.000000, 64.000000,
                                    31.000000, -23.000000, 76.000000, 39.000000, -7.000000, 45.000000, 29.000000,
                                    13.000000, 16.000000, 25.000000, 27.000000, 48.000000, 22.000000, 49.000000,
                                    36.000000, 10.000000, -38.000000, -68.000000, -276.000000, -308.000000, -308.000000,
                                    -233.000000, -45.000000, 21.000000, 46.000000, 106.000000, 65.000000, 97.000000,
                                    79.000000, 55.000000, 74.000000, 37.000000, -4.000000, -8.000000, -32.000000,
                                    -13.000000, -22.000000, 0.000000, 31.000000, 84.000000, 45.000000, 17.000000,
                                    63.000000, 29.000000, 81.000000, 46.000000, 6.000000, 51.000000, 8.000000,
                                    37.000000, 9.000000, 15.000000, 57.000000, 10.000000, 45.000000, -5.000000,
                                    13.000000, -18.000000, -63.000000, -225.000000, -310.000000, -289.000000,
                                    -166.000000, -64.000000, 28.000000, 65.000000, 98.000000, 52.000000, 75.000000,
                                    82.000000, 57.000000, 80.000000, 26.000000, 3.000000, -25.000000, -21.000000,
                                    -14.000000, -7.000000, -23.000000, 62.000000, 59.000000, 29.000000, 80.000000,
                                    40.000000, 48.000000, 59.000000, 41.000000, 59.000000, -11.000000, 41.000000,
                                    22.000000, 13.000000, 36.000000, 9.000000, 19.000000, 17.000000, 10.000000,
                                    50.000000, 11.000000, 46.000000, -41.000000, -189.000000, -278.000000, -330.000000,
                                    -309.000000, -162.000000, -41.000000, 40.000000, 69.000000, 100.000000, 51.000000,
                                    58.000000, 43.000000, 45.000000, 65.000000, 64.000000, -32.000000, 11.000000,
                                    3.000000, 4.000000, -21.000000, -8.000000, 81.000000, 44.000000, -14.000000,
                                    45.000000, 70.000000, 99.000000, 10.000000, 34.000000, 38.000000, 21.000000,
                                    30.000000, 32.000000, 9.000000, 12.000000, 13.000000, 54.000000, -1.000000,
                                    10.000000, 64.000000, 24.000000, 19.000000, 41.000000, -36.000000, -81.000000,
                                    -232.000000, -314.000000, -312.000000, -178.000000, -61.000000, 13.000000,
                                    57.000000, 116.000000, 115.000000, 52.000000, 40.000000, 25.000000, 84.000000,
                                    14.000000, 19.000000, -24.000000, -38.000000, -38.000000, 44.000000, -7.000000,
                                    41.000000, 35.000000, 44.000000, 64.000000, 32.000000, 46.000000, 35.000000,
                                    29.000000, 46.000000, 17.000000, 0.000000, 23.000000, 43.000000, 30.000000,
                                    60.000000, -7.000000, 34.000000, 2.000000, 30.000000, -169.000000, -254.000000,
                                    -307.000000, -269.000000, -125.000000, -64.000000, 39.000000, 73.000000, 95.000000,
                                    74.000000, 67.000000, 86.000000, 47.000000, 68.000000, 61.000000, -9.000000,
                                    -13.000000, -81.000000, 24.000000, -25.000000, 46.000000, 23.000000, 19.000000,
                                    111.000000, 25.000000, 21.000000, 36.000000, 75.000000, 21.000000, 11.000000,
                                    26.000000, 22.000000, 13.000000, 50.000000, 24.000000, -25.000000, 63.000000,
                                    25.000000, 35.000000, -1.000000, -2.000000, -14.000000, -148.000000, -288.000000,
                                    -354.000000, -308.000000, -226.000000, -42.000000, 42.000000, 68.000000, 68.000000,
                                    70.000000, 42.000000, 55.000000, 57.000000, 67.000000, 52.000000, 46.000000,
                                    23.000000, 5.000000, 12.000000, 12.000000, -15.000000, -6.000000, 51.000000,
                                    84.000000, 30.000000, 62.000000, 51.000000, 51.000000, 50.000000, 34.000000,
                                    14.000000, 43.000000, 26.000000, 24.000000, 26.000000, -10.000000, 11.000000,
                                    26.000000, 37.000000, 35.000000, 38.000000, 31.000000, 11.000000, -18.000000,
                                    -163.000000, -273.000000, -331.000000, -279.000000, -97.000000, -47.000000,
                                    85.000000, 51.000000, 112.000000, 74.000000, 57.000000, 22.000000, 82.000000,
                                    60.000000, 40.000000, 16.000000, -53.000000, -3.000000, -4.000000, -10.000000,
                                    2.000000, 56.000000, 15.000000, 55.000000, 58.000000, 67.000000, 23.000000,
                                    32.000000, 34.000000, 36.000000, 58.000000, -7.000000, 20.000000, 13.000000,
                                    25.000000, 28.000000, 36.000000, 62.000000, -1.000000, 35.000000, -32.000000,
                                    -175.000000, -290.000000, -269.000000, -226.000000, -96.000000, -22.000000,
                                    38.000000, 91.000000, 105.000000, 86.000000, 8.000000, 65.000000, 70.000000,
                                    67.000000, 27.000000, 24.000000, -29.000000, -9.000000, -38.000000, 19.000000,
                                    17.000000, 28.000000, 44.000000, 38.000000, 55.000000, 27.000000, 77.000000,
                                    51.000000, 33.000000, 2.000000, 50.000000, 13.000000, 51.000000, 13.000000,
                                    4.000000, 34.000000, 33.000000, 37.000000, 42.000000, 38.000000, 55.000000,
                                    36.000000, 29.000000, -46.000000, -150.000000, -278.000000, -350.000000,
                                    -276.000000, -155.000000, -14.000000, 54.000000, 49.000000, 104.000000, 72.000000,
                                    40.000000, 23.000000, 50.000000, 55.000000, 55.000000, 32.000000, -9.000000,
                                    26.000000, -12.000000, -41.000000, 30.000000, 36.000000, 30.000000, 58.000000,
                                    23.000000, 76.000000, 69.000000, 35.000000, 28.000000, 39.000000, 15.000000]
                        filtered = [-26420.619792,  -15209.963609,  -5940.315619,  237.660037,  3077.820484,  3202.639120,  1783.095723,  76.961728,  -991.354110,  -1061.163235,  -318.216416,  723.977794,  1524.471630,  1761.673447,  1434.261794,  799.885886,  207.736879,  -81.304880,  -2.568455,  314.912966,  642.908917,  781.837211,  656.044863,  335.391641,  -17.114106,  -236.380126,  -235.848168,  -40.055097,  240.344040,  471.560049,  562.360452,  500.548970,  346.704030,  194.138571,  119.160289,  147.071060,  248.131290,  361.100054,  428.808030,  426.501104,  369.944760,  302.070207,  267.715947,  290.613652,  363.766133,  456.280704,  531.217397,  564.314665,  554.339522,  521.072053,  493.408795,  494.454467,  530.960440,  591.405088,  652.396494,  689.342037,  686.087692,  639.635293,  558.961745,  459.737592,  358.100054,  266.235058,  190.944370,  134.656022,  97.363840,  78.067510,  75.120275,  85.832435,  106.155926,  131.093098,  155.856540,  177.208763,  194.216634,  207.968081,  220.403431,  232.932044,  245.624177,  257.420441,  267.192088,  274.968061,  282.519156,  292.835203,  308.665510,  330.869832,  357.522853,  384.400290,  406.786208,  421.818659,  430.207983,  436.340072,  446.468283,  465.600487,  494.382549,  527.424606,  554.011662,  561.179549,  538.128309,  480.327396,  391.716649,  284.112520,  173.997576,  77.858419,  7.742121,  -31.462525,  -42.245897,  -32.401688,  -11.665071,  11.584448,  32.420175,  49.750563,  65.200278,  81.236575,  99.443772,  119.626140,  139.968764,  158.021959,  171.978012,  181.660820,  188.822336,  196.635850,  208.578642,  227.112427,  252.647169,  283.197710,  314.929951,  343.491291,  365.709374,  381.030978,  392.062984,  403.823096,  421.767089,  449.182777,  484.914149,  522.409934,  550.706826,  557.262689,  531.809229,  469.911555,  374.933084,  257.638452,  133.526088,  18.817235,  -73.508142,  -136.333813,  -168.991387,  -175.934209,  -164.317690,  -141.571254,  -113.821440,  -85.462371,  -59.571655,  -38.528660,  -24.248355,  -17.825510,  -18.852181,  -24.956995,  -32.054366,  -35.419290,  -31.223492,  -17.851503,  3.650273,  30.249180,  58.428225,  85.782116,  111.902459,  138.096179,  166.092543,  196.458914,  227.657884,  256.396530,  279.249099,  294.797980,  305.119519,  315.598724,  332.776968,  360.917869,  398.754297,  438.043294,  464.956040,  464.172709,  424.327120,  342.713666,  227.298880,  95.067161,  -32.821240,  -137.291102,  -206.695015,  -239.306397,  -242.228750,  -227.445664,  -206.818485,  -188.093619,  -173.345498,  -160.092881,  -144.154177,  -122.674962,  -95.904539,  -67.075323,  -40.720642,  -20.466556,  -7.446816,  -0.029491,  5.195142,  11.827859,  22.324872,  37.482643,  56.774159,  79.101886,  103.396952,  128.732827,  154.052182,  177.934651,  198.836150,  215.888496,  229.865576,  243.612776,  261.338030,  286.689694,  320.257948,  357.651503,  389.298237,  402.516763,  385.431556,  331.395779,  242.187228,  128.582252,  7.882288,  -100.835936,  -182.068442,  -227.925010,  -239.499322,  -225.268149,  -197.345156,  -167.140737,  -142.041185,  -124.151565,  -111.235167,  -99.126558,  -84.424998,  -66.326682,  -46.942797,  -30.134259,  -19.492584,  -16.397624,  -19.007050,  -22.636333,  -21.427768,  -10.682467,  11.074708,  41.190016,  73.634515,  101.275671,  118.861581,  125.494855,  125.421351,  126.530861,  136.897126,  160.613807,  194.689290,  228.551342,  246.776542,  234.329640,  182.430349,  92.704507,  -22.203579,  -142.033777,  -245.174571,  -315.430628,  -346.701843,  -343.846020,  -319.588691,  -288.958035,  -263.647701,  -248.557196,  -241.640688,  -236.665354,  -227.257059,  -210.233604,  -186.801027,  -161.365472,  -138.878357,  -122.225274,  -110.957039,  -101.830161,  -90.654987,  -74.349577,  -52.136923,  -25.413737,  3.411134,  32.296205,  60.349718,  87.660351,  114.439558,  140.139575,  163.170155,  181.402235,  193.101533,  197.623289,  195.323985,  186.642086,  170.877782,  145.504753,  106.666147,  50.905195,  -22.535802,  -109.949158,  -202.925531,  -290.014948,  -359.792223,  -404.163454,  -420.601155,  -412.444532,  -387.228864,  -353.821942,  -319.573385,  -288.556488,  -261.403237,  -236.504075,  -211.806762,  -186.317931,  -160.688576,  -136.767190,  -116.476519,  -100.614280,  -88.134939,  -76.213042,  -61.061669,  -39.211612,  -8.815265,  29.469799,  72.360351,  114.738589,  151.233864,  178.171358,  195.218352,  205.996961,  217.158949,  235.935952,  266.838911,  308.711909,  353.462217,  387.339518,  394.716301,  363.267709,  288.719926,  177.300277,  44.770191,  -87.805288,  -200.116935,  -278.325766,  -318.391001,  -325.927651,  -312.883290,  -292.526051,  -274.769539,  -263.537463,  -256.884913,  -249.412855,  -235.652587,  -212.886527,  -182.323014,  -148.379712,  -116.645000,  -91.539915,  -74.664915,  -64.389789,  -56.680100,  -46.703326,  -30.566734,  -6.606887,  24.122940,  58.255270,  91.257262,  119.003133,  139.317400,  152.975069,  163.707670,  177.003774,  197.899532,  228.414544,  265.602724,  301.160807,  323.088044,  319.130601,  280.961264,  207.591274,  106.636698,  -7.220576,  -116.185477,  -204.368723,  -262.080730,  -287.882490,  -287.763531,  -271.946455,  -250.709821,  -230.908451,  -214.453987,  -199.108731,  -180.954116,  -157.247937,  -128.334690,  -97.801219,  -70.910155,  -52.115258,  -42.840756,  -40.553892,  -39.570136,  -33.271955,  -16.815723,  10.810583,  46.258937,  83.086520,  114.350360,  135.508940,  146.439186,  151.672350,  158.615529,  174.319623,  201.980913,  238.569525,  274.654613,  296.730986,  291.411424,  250.088339,  172.396499,  67.160441,  -49.620207,  -159.125208,  -244.928491,  -297.287072,  -315.086575,  -304.923515,  -277.872121,  -245.296399,  -215.313025,  -191.114054,  -171.511589,  -153.138743,  -133.119023,  -110.941077,  -88.747791,  -70.036527,  -57.514292,  -51.231784,  -47.975742,  -42.302895,  -28.819757,  -4.698639,  28.750268,  66.268011,  100.659141,  125.858239,  139.739488,  145.361603,  149.924218,  161.661001,  185.822029,  221.400618,  260.091986,  288.159985,  290.738446,  257.071234,  184.734295,  81.197512,  -37.933039,  -153.392026,  -247.826437,  -310.464097,  -339.299122,  -340.229515,  -323.759108,  -300.730073,  -278.760368,  -260.590287,  -244.647186,  -227.225473,  -205.123998,  -177.568208,  -146.705343,  -116.644352,  -91.610319,  -74.071528,  -63.613443,  -56.971538,  -49.172115,  -35.340911,  -12.532144,  19.064184,  55.986928,  92.565515,  122.915307,  143.242800,  153.620613,  158.435826,  165.079015,  181.068513,  210.497647,  251.161626,  293.700868,  323.491175,  324.977526,  287.079803,  207.671715,  95.290815,  -32.799710,  -155.656102,  -254.979579,  -320.326666,  -351.244376,  -355.653942,  -345.383503,  -330.912843,  -317.613485,  -304.951864,  -288.667479,  -264.541540,  -231.701537,  -193.770294,  -157.359326,  -128.810303,  -110.988004,  -101.868410,  -95.686418,  -86.026275,  -69.184449,  -45.973569,  -20.967024,  0.420221,  15.398645,  25.827632,  37.513658,  56.962089,  87.219545,  125.106970,  161.599853,  185.566859,  189.280053,  172.986924,  146.025349,  123.466376,  119.419152,  139.891252,  178.571120,  217.782563,  234.610082,  209.834898,  135.956589,  20.865846,  -114.433038,  -243.104990,  -341.723325,  -397.693458,  -412.028695,  -396.764499,  -368.593186,  -341.742735,  -323.128268,  -311.483603,  -300.241007,  -282.302786,  -254.244448,  -218.073928,  -180.044390,  -147.453675,  -125.186210,  -113.653616,  -108.931601,  -104.775851,  -95.387581,  -77.628009,  -51.832444,  -21.133711,  10.140949,  38.174725,  60.815234,  77.941763,  91.195327,  103.378766,  117.746336,  137.212306,  163.409046,  195.626251,  229.914744,  258.859953,  272.519200,  260.680485,  216.028899,  137.249830,  30.849314,  -89.279916,  -204.796409,  -297.654887,  -355.169208,  -373.621147,  -359.037456,  -324.730655,  -286.403968,  -256.590584,  -240.527125,  -235.076700]
                        filtered = filtered[50:]
                        q_ppg_original = q_ppg(original)
                        q_ppg_filtered = q_ppg(filtered)
                        q_ppg_filtered_y = [filtered[i] for i in q_ppg_filtered]
                        above = [True if i > 300 else False for i in q_ppg_filtered_y]
                        if any(above):
                            continue
                        if len(q_ppg_filtered) > 13 or len(q_ppg_filtered) < 8:
                            continue
                        try:
                            fig, axs = plt.subplots(2, figsize=(20, 10))
                            # no filter
                            axs[0].plot(np.arange(len(original)), original)
                            # filter
                            axs[1].plot(np.arange(len(filtered)), filtered)
                            axs[0].plot(q_ppg(original), [original[i] for i in q_ppg(original)], 'r+')
                            axs[1].plot(q_ppg(filtered), [filtered[i] for i in q_ppg(filtered)], 'r+')
                            fig.savefig(
                                f'./figs/{slope_width}-{eye_closing_period}-{no_detection_period}-{threshold_min_default}-{fs}.png')
                            plt.close()
                        except Exception:
                            continue


if '__main__' == __name__:
    bruteforce_qppg()
